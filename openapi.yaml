openapi: 3.0.0
info:
  title: Greek Social Platform API
  version: 1.0.0
servers:
  - url: /api
paths:
  # Tag Endpoints
  /tags:
    get:
      summary: Get all tags (paginated)
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: pageSize
          schema: { type: integer }
        - in: query
          name: name
          schema: { type: string }
      responses:
        200:
          description: List of tags
    post:
      summary: Create a tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
      responses:
        201:
          description: Tag created
  /tags/{id}:
    get:
      summary: Get tag by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          description: Tag object
    put:
      summary: Update tag
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
      responses:
        200:
          description: Tag updated
    delete:
      summary: Delete tag
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          description: Tag deleted
  /tags/assign:
    post:
      summary: Assign tag to entity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entity: { type: string }
                entityId: { type: integer }
                tagId: { type: integer }
      responses:
        200:
          description: Tag assigned
  /tags/remove:
    post:
      summary: Remove tag from entity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entity: { type: string }
                entityId: { type: integer }
                tagId: { type: integer }
      responses:
        200:
          description: Tag removed
  /tags/{entity}/{entityId}/tags:
    get:
      summary: Get tags for an entity
      parameters:
        - in: path
          name: entity
          required: true
          schema: { type: string }
        - in: path
          name: entityId
          required: true
          schema: { type: integer }
      responses:
        200:
          description: List of tags for entity
  # Event Endpoints
  /events:
    get:
      summary: Get all events (paginated)
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: pageSize
          schema: { type: integer }
        - in: query
          name: chapter_id
          schema: { type: integer }
        - in: query
          name: organization_id
          schema: { type: integer }
      responses:
        200:
          description: List of events
    post:
      summary: Create an event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event_name: { type: string }
                event_date: { type: string, format: date-time }
                description: { type: string }
                visibility: { type: string, enum: [public, private] }
                chapter_id: { type: integer }
                organization_id: { type: integer }
      responses:
        201:
          description: Event created
  /events/{id}:
    get:
      summary: Get event by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          description: Event object
    put:
      summary: Update event
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event_name: { type: string }
                event_date: { type: string, format: date-time }
                description: { type: string }
                visibility: { type: string, enum: [public, private] }
                chapter_id: { type: integer }
                organization_id: { type: integer }
      responses:
        200:
          description: Event updated
    delete:
      summary: Delete event
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          description: Event deleted
  # Post Endpoints
  /posts:
    get:
      summary: Get all posts (paginated)
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: pageSize
          schema: { type: integer }
        - in: query
          name: member_id
          schema: { type: integer }
        - in: query
          name: chapter_id
          schema: { type: integer }
        - in: query
          name: organization_id
          schema: { type: integer }
      responses:
        200:
          description: List of posts
    post:
      summary: Create a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
                member_id: { type: integer }
                chapter_id: { type: integer }
                organization_id: { type: integer }
      responses:
        201:
          description: Post created
  /posts/{id}:
    get:
      summary: Get post by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          description: Post object
    put:
      summary: Update post
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
                member_id: { type: integer }
                chapter_id: { type: integer }
                organization_id: { type: integer }
      responses:
        200:
          description: Post updated
    delete:
      summary: Delete post
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          description: Post deleted
  # Comment Endpoints
  /comments:
    get:
      summary: Get all comments (paginated)
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: pageSize
          schema: { type: integer }
        - in: query
          name: post_id
          schema: { type: integer }
        - in: query
          name: member_id
          schema: { type: integer }
      responses:
        200:
          description: List of comments
    post:
      summary: Create a comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
                post_id: { type: integer }
                member_id: { type: integer }
      responses:
        201:
          description: Comment created
  /comments/{id}:
    get:
      summary: Get comment by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          description: Comment object
    put:
      summary: Update comment
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
                post_id: { type: integer }
                member_id: { type: integer }
      responses:
        200:
          description: Comment updated
    delete:
      summary: Delete comment
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          description: Comment deleted
  # Member Endpoints
  /members:
    get:
      summary: Get all members (paginated)
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: pageSize
          schema: { type: integer }
        - in: query
          name: chapter_id
          schema: { type: integer }
      responses:
        200:
          description: List of members
    post:
      summary: Create a member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                chapter_id: { type: integer }
                join_date: { type: string, format: date-time }
      responses:
        201:
          description: Member created
  /members/{id}:
    get:
      summary: Get member by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          description: Member object
    put:
      summary: Update member
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                chapter_id: { type: integer }
                join_date: { type: string, format: date-time }
      responses:
        200:
          description: Member updated
    delete:
      summary: Delete member
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          description: Member deleted
  # Organization Endpoints
  /organizations:
    get:
      summary: Get all organizations (paginated)
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: pageSize
          schema: { type: integer }
      responses:
        200:
          description: List of organizations
    post:
      summary: Create an organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                founded_date: { type: string, format: date-time }
                website: { type: string }
      responses:
        201:
          description: Organization created
  /organizations/{id}:
    get:
      summary: Get organization by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          description: Organization object
    put:
      summary: Update organization
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                founded_date: { type: string, format: date-time }
                website: { type: string }
      responses:
        200:
          description: Organization updated
    delete:
      summary: Delete organization
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          description: Organization deleted
  # Chapter Endpoints
  /chapters:
    get:
      summary: Get all chapters (paginated)
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: pageSize
          schema: { type: integer }
        - in: query
          name: organization_id
          schema: { type: integer }
      responses:
        200:
          description: List of chapters
    post:
      summary: Create a chapter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organization_id: { type: integer }
                location: { type: string }
                founded_date: { type: string, format: date-time }
      responses:
        201:
          description: Chapter created
  /chapters/{id}:
    get:
      summary: Get chapter by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          description: Chapter object
    put:
      summary: Update chapter
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organization_id: { type: integer }
                location: { type: string }
                founded_date: { type: string, format: date-time }
      responses:
        200:
          description: Chapter updated
    delete:
      summary: Delete chapter
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          description: Chapter deleted
  # Account, Role, Permission, Notification, Message, Friendship, Like endpoints would follow similar CRUD and association patterns.
